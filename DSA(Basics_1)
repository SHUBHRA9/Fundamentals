Q1  : What is a Data Structure? 
Ans : A data structure is a way of organizing data so that the data can be used efficiently. Different kinds of data structures are suited to different kinds of applications, and some are highly specialized for specific tasks. 
For example, B-trees are particularly well-suited for the implementation of databases, while compiler implementations usually use hash tables to look up identifiers.

Q2  : What are linear and non-linear data Structures? 
Ans :   * Linear: A data structure is said to be linear if its elements form a sequence or a linear list. Examples: Array. Linked List, Stacks and Queues
        * Non-Linear: A data structure is said to be non-linear if the traversal of nodes is nonlinear in nature. Example: Graph and Trees.
        
Q3  : What are the various operations that can be performed on different Data Structures? 
Ans :    * Insertion - Add a new data item in the given collection of data items.
         * Deletion - Delete an existing data item from the given collection of data items.
         * Traversal - Access each data item exactly once so that it can be processed.
         * Searching - Find out the location of the data item if it exists in the given collection of data items.
         * Sorting - Arranging the data items in some order i.e. in ascending or descending order in case of numerical data and in dictionary order in case of alphanumeric data.
 
 Q4 : How is an Array different from Linked List? 
Ans : The size of the arrays is fixed, and Linked Lists are Dynamic in size.
      Inserting and deleting a new element in an array of elements is expensive, Whereas both insertion and deletion can easily be done in Linked Lists.
      Random access is not allowed on Linked Listed.
      Extra memory space for a pointer is required with each element of the Linked list.
      Arrays have a better cache locality that can make a pretty big difference in performance.
      
 Q5 : What is Stack and where it can be used? 
Ans : Stack is a linear data structure in which the order LIFO(Last In First Out) or FILO(First In Last Out) for accessing elements. Basic operations of the stack are: Push, Pop, Peek 
      Applications of Stack: 
            * Infix to Postfix Conversion using Stack
            * Evaluation of Postfix Expression
            * Reverse a String using Stack
            * Implement two stacks in an array
            * Check for balanced parentheses in an expression
          
 Q6 : What is a Queue, how it is different from the stack and how is it implemented? 
Ans : The queue is a linear structure that follows the order is First In First Out (FIFO) to access elements. Mainly the following are basic operations on queue: Enqueue, Dequeue, Front, Rear 
      The difference between stacks and queues is in removing. In a stack we remove the item the most recently added; in a queue, we remove the item the least recently added. 
      Both Queues and Stacks can be implemented using Arrays and Linked Lists. 
